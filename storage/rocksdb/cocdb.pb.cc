// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cocdb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cocdb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cdb {

namespace {

const ::google::protobuf::Descriptor* BeginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trx_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Result_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Operation_Op_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IterRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IterRequest_Direction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* IterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IterResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cocdb_2eproto() {
  protobuf_AddDesc_cocdb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cocdb.proto");
  GOOGLE_CHECK(file != NULL);
  BeginRequest_descriptor_ = file->message_type(0);
  static const int BeginRequest_offsets_[1] = {
  };
  BeginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BeginRequest_descriptor_,
      BeginRequest::default_instance_,
      BeginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BeginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginRequest, _is_default_instance_));
  Trx_descriptor_ = file->message_type(1);
  static const int Trx_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trx, trx_id_),
  };
  Trx_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trx_descriptor_,
      Trx::default_instance_,
      Trx_offsets_,
      -1,
      -1,
      -1,
      sizeof(Trx),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trx, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trx, _is_default_instance_));
  Result_descriptor_ = file->message_type(2);
  static const int Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, msg_),
  };
  Result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      -1,
      -1,
      -1,
      sizeof(Result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _is_default_instance_));
  Result_Status_descriptor_ = Result_descriptor_->enum_type(0);
  Operation_descriptor_ = file->message_type(3);
  static const int Operation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, val_),
  };
  Operation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Operation_descriptor_,
      Operation::default_instance_,
      Operation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Operation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _is_default_instance_));
  Operation_Op_descriptor_ = Operation_descriptor_->enum_type(0);
  GetRequest_descriptor_ = file->message_type(4);
  static const int GetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, trx_id_),
  };
  GetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::default_instance_,
      GetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _is_default_instance_));
  GetResponse_descriptor_ = file->message_type(5);
  static const int GetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, val_),
  };
  GetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::default_instance_,
      GetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _is_default_instance_));
  PutRequest_descriptor_ = file->message_type(6);
  static const int PutRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, trx_id_),
  };
  PutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutRequest_descriptor_,
      PutRequest::default_instance_,
      PutRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _is_default_instance_));
  PutResponse_descriptor_ = file->message_type(7);
  static const int PutResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, res_),
  };
  PutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutResponse_descriptor_,
      PutResponse::default_instance_,
      PutResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _is_default_instance_));
  CommitResponse_descriptor_ = file->message_type(8);
  static const int CommitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, res_),
  };
  CommitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitResponse_descriptor_,
      CommitResponse::default_instance_,
      CommitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _is_default_instance_));
  IterRequest_descriptor_ = file->message_type(9);
  static const int IterRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterRequest, offset_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterRequest, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterRequest, cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterRequest, trx_id_),
  };
  IterRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IterRequest_descriptor_,
      IterRequest::default_instance_,
      IterRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(IterRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterRequest, _is_default_instance_));
  IterRequest_Direction_descriptor_ = IterRequest_descriptor_->enum_type(0);
  IterResponse_descriptor_ = file->message_type(10);
  static const int IterResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterResponse, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterResponse, cur_key_),
  };
  IterResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IterResponse_descriptor_,
      IterResponse::default_instance_,
      IterResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(IterResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IterResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cocdb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BeginRequest_descriptor_, &BeginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trx_descriptor_, &Trx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Operation_descriptor_, &Operation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRequest_descriptor_, &GetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetResponse_descriptor_, &GetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutRequest_descriptor_, &PutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutResponse_descriptor_, &PutResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitResponse_descriptor_, &CommitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IterRequest_descriptor_, &IterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IterResponse_descriptor_, &IterResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cocdb_2eproto() {
  delete BeginRequest::default_instance_;
  delete BeginRequest_reflection_;
  delete Trx::default_instance_;
  delete Trx_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
  delete Operation::default_instance_;
  delete Operation_reflection_;
  delete GetRequest::default_instance_;
  delete GetRequest_reflection_;
  delete GetResponse::default_instance_;
  delete GetResponse_reflection_;
  delete PutRequest::default_instance_;
  delete PutRequest_reflection_;
  delete PutResponse::default_instance_;
  delete PutResponse_reflection_;
  delete CommitResponse::default_instance_;
  delete CommitResponse_reflection_;
  delete IterRequest::default_instance_;
  delete IterRequest_reflection_;
  delete IterResponse::default_instance_;
  delete IterResponse_reflection_;
}

void protobuf_AddDesc_cocdb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013cocdb.proto\022\003cdb\"\016\n\014BeginRequest\"\025\n\003Tr"
    "x\022\016\n\006trx_id\030\001 \001(\t\"V\n\006Result\022\"\n\006status\030\002 "
    "\001(\0162\022.cdb.Result.Status\022\013\n\003msg\030\003 \001(\t\"\033\n\006"
    "Status\022\006\n\002OK\020\000\022\t\n\005ERROR\020\001\"a\n\tOperation\022\037"
    "\n\004type\030\001 \001(\0162\021.cdb.Operation.Op\022\013\n\003key\030\002"
    " \001(\014\022\013\n\003val\030\003 \001(\014\"\031\n\002Op\022\007\n\003PUT\020\000\022\n\n\006DELE"
    "TE\020\001\")\n\nGetRequest\022\013\n\003key\030\001 \001(\014\022\016\n\006trx_i"
    "d\030\002 \001(\t\"4\n\013GetResponse\022\030\n\003res\030\001 \001(\0132\013.cd"
    "b.Result\022\013\n\003val\030\002 \001(\014\"9\n\nPutRequest\022\033\n\003o"
    "ps\030\001 \003(\0132\016.cdb.Operation\022\016\n\006trx_id\030\002 \001(\t"
    "\"\'\n\013PutResponse\022\030\n\003res\030\001 \001(\0132\013.cdb.Resul"
    "t\"*\n\016CommitResponse\022\030\n\003res\030\001 \001(\0132\013.cdb.R"
    "esult\"\216\001\n\013IterRequest\022\022\n\noffset_key\030\001 \001("
    "\014\022-\n\tdirection\030\002 \001(\0162\032.cdb.IterRequest.D"
    "irection\022\013\n\003cnt\030\003 \001(\005\022\016\n\006trx_id\030\004 \001(\t\"\037\n"
    "\tDirection\022\010\n\004Prev\020\000\022\010\n\004Next\020\001\"9\n\014IterRe"
    "sponse\022\030\n\003res\030\001 \001(\0132\013.cdb.Result\022\017\n\007cur_"
    "key\030\002 \001(\0142\345\001\n\003CDB\022*\n\003Get\022\017.cdb.GetReques"
    "t\032\020.cdb.GetResponse\"\000\022*\n\003Put\022\017.cdb.PutRe"
    "quest\032\020.cdb.PutResponse\"\000\022)\n\010BeginTrx\022\021."
    "cdb.BeginRequest\032\010.cdb.Trx\"\000\022,\n\tCommitTr"
    "x\022\010.cdb.Trx\032\023.cdb.CommitResponse\"\000\022-\n\004It"
    "er\022\020.cdb.IterRequest\032\021.cdb.IterResponse\""
    "\000b\006proto3", 929);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cocdb.proto", &protobuf_RegisterTypes);
  BeginRequest::default_instance_ = new BeginRequest();
  Trx::default_instance_ = new Trx();
  Result::default_instance_ = new Result();
  Operation::default_instance_ = new Operation();
  GetRequest::default_instance_ = new GetRequest();
  GetResponse::default_instance_ = new GetResponse();
  PutRequest::default_instance_ = new PutRequest();
  PutResponse::default_instance_ = new PutResponse();
  CommitResponse::default_instance_ = new CommitResponse();
  IterRequest::default_instance_ = new IterRequest();
  IterResponse::default_instance_ = new IterResponse();
  BeginRequest::default_instance_->InitAsDefaultInstance();
  Trx::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  Operation::default_instance_->InitAsDefaultInstance();
  GetRequest::default_instance_->InitAsDefaultInstance();
  GetResponse::default_instance_->InitAsDefaultInstance();
  PutRequest::default_instance_->InitAsDefaultInstance();
  PutResponse::default_instance_->InitAsDefaultInstance();
  CommitResponse::default_instance_->InitAsDefaultInstance();
  IterRequest::default_instance_->InitAsDefaultInstance();
  IterResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cocdb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cocdb_2eproto {
  StaticDescriptorInitializer_cocdb_2eproto() {
    protobuf_AddDesc_cocdb_2eproto();
  }
} static_descriptor_initializer_cocdb_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BeginRequest::BeginRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.BeginRequest)
}

void BeginRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BeginRequest::BeginRequest(const BeginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.BeginRequest)
}

void BeginRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BeginRequest::~BeginRequest() {
  // @@protoc_insertion_point(destructor:cdb.BeginRequest)
  SharedDtor();
}

void BeginRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginRequest_descriptor_;
}

const BeginRequest& BeginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

BeginRequest* BeginRequest::default_instance_ = NULL;

BeginRequest* BeginRequest::New(::google::protobuf::Arena* arena) const {
  BeginRequest* n = new BeginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginRequest::Clear() {
}

bool BeginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.BeginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.BeginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.BeginRequest)
  return false;
#undef DO_
}

void BeginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.BeginRequest)
  // @@protoc_insertion_point(serialize_end:cdb.BeginRequest)
}

::google::protobuf::uint8* BeginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.BeginRequest)
  // @@protoc_insertion_point(serialize_to_array_end:cdb.BeginRequest)
  return target;
}

int BeginRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BeginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginRequest::MergeFrom(const BeginRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void BeginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginRequest::CopyFrom(const BeginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginRequest::IsInitialized() const {

  return true;
}

void BeginRequest::Swap(BeginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginRequest::InternalSwap(BeginRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginRequest_descriptor_;
  metadata.reflection = BeginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Trx::kTrxIdFieldNumber;
#endif  // !_MSC_VER

Trx::Trx()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.Trx)
}

void Trx::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Trx::Trx(const Trx& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.Trx)
}

void Trx::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trx_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Trx::~Trx() {
  // @@protoc_insertion_point(destructor:cdb.Trx)
  SharedDtor();
}

void Trx::SharedDtor() {
  trx_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Trx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trx_descriptor_;
}

const Trx& Trx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

Trx* Trx::default_instance_ = NULL;

Trx* Trx::New(::google::protobuf::Arena* arena) const {
  Trx* n = new Trx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trx::Clear() {
  trx_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Trx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.Trx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trx_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trx_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trx_id().data(), this->trx_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdb.Trx.trx_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.Trx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.Trx)
  return false;
#undef DO_
}

void Trx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.Trx)
  // optional string trx_id = 1;
  if (this->trx_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trx_id().data(), this->trx_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdb.Trx.trx_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trx_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cdb.Trx)
}

::google::protobuf::uint8* Trx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.Trx)
  // optional string trx_id = 1;
  if (this->trx_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trx_id().data(), this->trx_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdb.Trx.trx_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trx_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cdb.Trx)
  return target;
}

int Trx::ByteSize() const {
  int total_size = 0;

  // optional string trx_id = 1;
  if (this->trx_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trx_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trx::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Trx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trx::MergeFrom(const Trx& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.trx_id().size() > 0) {

    trx_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trx_id_);
  }
}

void Trx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trx::CopyFrom(const Trx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trx::IsInitialized() const {

  return true;
}

void Trx::Swap(Trx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trx::InternalSwap(Trx* other) {
  trx_id_.Swap(&other->trx_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trx_descriptor_;
  metadata.reflection = Trx_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Result_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_Status_descriptor_;
}
bool Result_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Result_Status Result::OK;
const Result_Status Result::ERROR;
const Result_Status Result::Status_MIN;
const Result_Status Result::Status_MAX;
const int Result::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Result::kStatusFieldNumber;
const int Result::kMsgFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.Result)
}

void Result::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Result::Result(const Result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.Result)
}

void Result::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:cdb.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
  status_ = 0;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cdb.Result.Status status = 2;
      case 2: {
        if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::cdb::Result_Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdb.Result.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.Result)
  // optional .cdb.Result.Status status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdb.Result.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:cdb.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.Result)
  // optional .cdb.Result.Status status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdb.Result.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cdb.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  // optional .cdb.Result.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {

  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(status_, other->status_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Operation_Op_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_Op_descriptor_;
}
bool Operation_Op_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Operation_Op Operation::PUT;
const Operation_Op Operation::DELETE;
const Operation_Op Operation::Op_MIN;
const Operation_Op Operation::Op_MAX;
const int Operation::Op_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Operation::kTypeFieldNumber;
const int Operation::kKeyFieldNumber;
const int Operation::kValFieldNumber;
#endif  // !_MSC_VER

Operation::Operation()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.Operation)
}

void Operation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Operation::Operation(const Operation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.Operation)
}

void Operation::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:cdb.Operation)
  SharedDtor();
}

void Operation::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}

const Operation& Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

Operation* Operation::default_instance_ = NULL;

Operation* Operation::New(::google::protobuf::Arena* arena) const {
  Operation* n = new Operation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Operation::Clear() {
  type_ = 0;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.Operation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cdb.Operation.Op type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::cdb::Operation_Op >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }

      // optional bytes val = 3;
      case 3: {
        if (tag == 26) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.Operation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.Operation)
  return false;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.Operation)
  // optional .cdb.Operation.Op type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes val = 3;
  if (this->val().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->val(), output);
  }

  // @@protoc_insertion_point(serialize_end:cdb.Operation)
}

::google::protobuf::uint8* Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.Operation)
  // optional .cdb.Operation.Op type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes val = 3;
  if (this->val().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->val(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cdb.Operation)
  return target;
}

int Operation::ByteSize() const {
  int total_size = 0;

  // optional .cdb.Operation.Op type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes val = 3;
  if (this->val().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->val());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.val().size() > 0) {

    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {

  return true;
}

void Operation::Swap(Operation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operation::InternalSwap(Operation* other) {
  std::swap(type_, other->type_);
  key_.Swap(&other->key_);
  val_.Swap(&other->val_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_descriptor_;
  metadata.reflection = Operation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRequest::kKeyFieldNumber;
const int GetRequest::kTrxIdFieldNumber;
#endif  // !_MSC_VER

GetRequest::GetRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.GetRequest)
}

void GetRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trx_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:cdb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trx_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

GetRequest* GetRequest::default_instance_ = NULL;

GetRequest* GetRequest::New(::google::protobuf::Arena* arena) const {
  GetRequest* n = new GetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRequest::Clear() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trx_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_trx_id;
        break;
      }

      // optional string trx_id = 2;
      case 2: {
        if (tag == 18) {
         parse_trx_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trx_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trx_id().data(), this->trx_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdb.GetRequest.trx_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.GetRequest)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional string trx_id = 2;
  if (this->trx_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trx_id().data(), this->trx_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdb.GetRequest.trx_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trx_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cdb.GetRequest)
}

::google::protobuf::uint8* GetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.GetRequest)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional string trx_id = 2;
  if (this->trx_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trx_id().data(), this->trx_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdb.GetRequest.trx_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trx_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cdb.GetRequest)
  return target;
}

int GetRequest::ByteSize() const {
  int total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional string trx_id = 2;
  if (this->trx_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trx_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.trx_id().size() > 0) {

    trx_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trx_id_);
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  key_.Swap(&other->key_);
  trx_id_.Swap(&other->trx_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetResponse::kResFieldNumber;
const int GetResponse::kValFieldNumber;
#endif  // !_MSC_VER

GetResponse::GetResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.GetResponse)
}

void GetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  res_ = const_cast< ::cdb::Result*>(&::cdb::Result::default_instance());
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.GetResponse)
}

void GetResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  res_ = NULL;
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:cdb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete res_;
  }
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

GetResponse* GetResponse::default_instance_ = NULL;

GetResponse* GetResponse::New(::google::protobuf::Arena* arena) const {
  GetResponse* n = new GetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetResponse::Clear() {
  if (res_ != NULL) delete res_;
  res_ = NULL;
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.GetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cdb.Result res = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }

      // optional bytes val = 2;
      case 2: {
        if (tag == 18) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.GetResponse)
  return false;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.GetResponse)
  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->res_, output);
  }

  // optional bytes val = 2;
  if (this->val().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->val(), output);
  }

  // @@protoc_insertion_point(serialize_end:cdb.GetResponse)
}

::google::protobuf::uint8* GetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.GetResponse)
  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->res_, target);
  }

  // optional bytes val = 2;
  if (this->val().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->val(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cdb.GetResponse)
  return target;
}

int GetResponse::ByteSize() const {
  int total_size = 0;

  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_);
  }

  // optional bytes val = 2;
  if (this->val().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->val());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_res()) {
    mutable_res()->::cdb::Result::MergeFrom(from.res());
  }
  if (from.val().size() > 0) {

    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {

  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  std::swap(res_, other->res_);
  val_.Swap(&other->val_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutRequest::kOpsFieldNumber;
const int PutRequest::kTrxIdFieldNumber;
#endif  // !_MSC_VER

PutRequest::PutRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.PutRequest)
}

void PutRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.PutRequest)
}

void PutRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trx_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:cdb.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  trx_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutRequest_descriptor_;
}

const PutRequest& PutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

PutRequest* PutRequest::default_instance_ = NULL;

PutRequest* PutRequest::New(::google::protobuf::Arena* arena) const {
  PutRequest* n = new PutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutRequest::Clear() {
  trx_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ops_.Clear();
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.PutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cdb.Operation ops = 1;
      case 1: {
        if (tag == 10) {
         parse_ops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ops;
        if (input->ExpectTag(18)) goto parse_trx_id;
        break;
      }

      // optional string trx_id = 2;
      case 2: {
        if (tag == 18) {
         parse_trx_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trx_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trx_id().data(), this->trx_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdb.PutRequest.trx_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.PutRequest)
  // repeated .cdb.Operation ops = 1;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ops(i), output);
  }

  // optional string trx_id = 2;
  if (this->trx_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trx_id().data(), this->trx_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdb.PutRequest.trx_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trx_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cdb.PutRequest)
}

::google::protobuf::uint8* PutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.PutRequest)
  // repeated .cdb.Operation ops = 1;
  for (unsigned int i = 0, n = this->ops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ops(i), target);
  }

  // optional string trx_id = 2;
  if (this->trx_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trx_id().data(), this->trx_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdb.PutRequest.trx_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trx_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cdb.PutRequest)
  return target;
}

int PutRequest::ByteSize() const {
  int total_size = 0;

  // optional string trx_id = 2;
  if (this->trx_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trx_id());
  }

  // repeated .cdb.Operation ops = 1;
  total_size += 1 * this->ops_size();
  for (int i = 0; i < this->ops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ops(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ops_.MergeFrom(from.ops_);
  if (from.trx_id().size() > 0) {

    trx_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trx_id_);
  }
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutRequest::IsInitialized() const {

  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  ops_.UnsafeArenaSwap(&other->ops_);
  trx_id_.Swap(&other->trx_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutRequest_descriptor_;
  metadata.reflection = PutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutResponse::kResFieldNumber;
#endif  // !_MSC_VER

PutResponse::PutResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.PutResponse)
}

void PutResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  res_ = const_cast< ::cdb::Result*>(&::cdb::Result::default_instance());
}

PutResponse::PutResponse(const PutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.PutResponse)
}

void PutResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  res_ = NULL;
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:cdb.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
  if (this != default_instance_) {
    delete res_;
  }
}

void PutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutResponse_descriptor_;
}

const PutResponse& PutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

PutResponse* PutResponse::default_instance_ = NULL;

PutResponse* PutResponse::New(::google::protobuf::Arena* arena) const {
  PutResponse* n = new PutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutResponse::Clear() {
  if (res_ != NULL) delete res_;
  res_ = NULL;
}

bool PutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.PutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cdb.Result res = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.PutResponse)
  return false;
#undef DO_
}

void PutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.PutResponse)
  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->res_, output);
  }

  // @@protoc_insertion_point(serialize_end:cdb.PutResponse)
}

::google::protobuf::uint8* PutResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.PutResponse)
  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->res_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cdb.PutResponse)
  return target;
}

int PutResponse::ByteSize() const {
  int total_size = 0;

  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PutResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_res()) {
    mutable_res()->::cdb::Result::MergeFrom(from.res());
  }
}

void PutResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutResponse::IsInitialized() const {

  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutResponse::InternalSwap(PutResponse* other) {
  std::swap(res_, other->res_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutResponse_descriptor_;
  metadata.reflection = PutResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommitResponse::kResFieldNumber;
#endif  // !_MSC_VER

CommitResponse::CommitResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.CommitResponse)
}

void CommitResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  res_ = const_cast< ::cdb::Result*>(&::cdb::Result::default_instance());
}

CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.CommitResponse)
}

void CommitResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  res_ = NULL;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:cdb.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
  if (this != default_instance_) {
    delete res_;
  }
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitResponse_descriptor_;
}

const CommitResponse& CommitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

CommitResponse* CommitResponse::default_instance_ = NULL;

CommitResponse* CommitResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse* n = new CommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse::Clear() {
  if (res_ != NULL) delete res_;
  res_ = NULL;
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.CommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cdb.Result res = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.CommitResponse)
  return false;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.CommitResponse)
  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->res_, output);
  }

  // @@protoc_insertion_point(serialize_end:cdb.CommitResponse)
}

::google::protobuf::uint8* CommitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.CommitResponse)
  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->res_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cdb.CommitResponse)
  return target;
}

int CommitResponse::ByteSize() const {
  int total_size = 0;

  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_res()) {
    mutable_res()->::cdb::Result::MergeFrom(from.res());
  }
}

void CommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {

  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  std::swap(res_, other->res_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitResponse_descriptor_;
  metadata.reflection = CommitResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* IterRequest_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IterRequest_Direction_descriptor_;
}
bool IterRequest_Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const IterRequest_Direction IterRequest::Prev;
const IterRequest_Direction IterRequest::Next;
const IterRequest_Direction IterRequest::Direction_MIN;
const IterRequest_Direction IterRequest::Direction_MAX;
const int IterRequest::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int IterRequest::kOffsetKeyFieldNumber;
const int IterRequest::kDirectionFieldNumber;
const int IterRequest::kCntFieldNumber;
const int IterRequest::kTrxIdFieldNumber;
#endif  // !_MSC_VER

IterRequest::IterRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.IterRequest)
}

void IterRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IterRequest::IterRequest(const IterRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.IterRequest)
}

void IterRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  offset_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  cnt_ = 0;
  trx_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IterRequest::~IterRequest() {
  // @@protoc_insertion_point(destructor:cdb.IterRequest)
  SharedDtor();
}

void IterRequest::SharedDtor() {
  offset_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trx_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IterRequest_descriptor_;
}

const IterRequest& IterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

IterRequest* IterRequest::default_instance_ = NULL;

IterRequest* IterRequest::New(::google::protobuf::Arena* arena) const {
  IterRequest* n = new IterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IterRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IterRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(direction_, cnt_);
  offset_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trx_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef OFFSET_OF_FIELD_
#undef ZR_

}

bool IterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.IterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes offset_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_offset_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_direction;
        break;
      }

      // optional .cdb.IterRequest.Direction direction = 2;
      case 2: {
        if (tag == 16) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::cdb::IterRequest_Direction >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cnt;
        break;
      }

      // optional int32 cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_trx_id;
        break;
      }

      // optional string trx_id = 4;
      case 4: {
        if (tag == 34) {
         parse_trx_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trx_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trx_id().data(), this->trx_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdb.IterRequest.trx_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.IterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.IterRequest)
  return false;
#undef DO_
}

void IterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.IterRequest)
  // optional bytes offset_key = 1;
  if (this->offset_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->offset_key(), output);
  }

  // optional .cdb.IterRequest.Direction direction = 2;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // optional int32 cnt = 3;
  if (this->cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cnt(), output);
  }

  // optional string trx_id = 4;
  if (this->trx_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trx_id().data(), this->trx_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdb.IterRequest.trx_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->trx_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cdb.IterRequest)
}

::google::protobuf::uint8* IterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.IterRequest)
  // optional bytes offset_key = 1;
  if (this->offset_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->offset_key(), target);
  }

  // optional .cdb.IterRequest.Direction direction = 2;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  // optional int32 cnt = 3;
  if (this->cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cnt(), target);
  }

  // optional string trx_id = 4;
  if (this->trx_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trx_id().data(), this->trx_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdb.IterRequest.trx_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->trx_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cdb.IterRequest)
  return target;
}

int IterRequest::ByteSize() const {
  int total_size = 0;

  // optional bytes offset_key = 1;
  if (this->offset_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->offset_key());
  }

  // optional .cdb.IterRequest.Direction direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // optional int32 cnt = 3;
  if (this->cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cnt());
  }

  // optional string trx_id = 4;
  if (this->trx_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trx_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IterRequest::MergeFrom(const IterRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.offset_key().size() > 0) {

    offset_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offset_key_);
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.cnt() != 0) {
    set_cnt(from.cnt());
  }
  if (from.trx_id().size() > 0) {

    trx_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trx_id_);
  }
}

void IterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IterRequest::CopyFrom(const IterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterRequest::IsInitialized() const {

  return true;
}

void IterRequest::Swap(IterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IterRequest::InternalSwap(IterRequest* other) {
  offset_key_.Swap(&other->offset_key_);
  std::swap(direction_, other->direction_);
  std::swap(cnt_, other->cnt_);
  trx_id_.Swap(&other->trx_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IterRequest_descriptor_;
  metadata.reflection = IterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IterResponse::kResFieldNumber;
const int IterResponse::kCurKeyFieldNumber;
#endif  // !_MSC_VER

IterResponse::IterResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cdb.IterResponse)
}

void IterResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  res_ = const_cast< ::cdb::Result*>(&::cdb::Result::default_instance());
}

IterResponse::IterResponse(const IterResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cdb.IterResponse)
}

void IterResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  res_ = NULL;
  cur_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IterResponse::~IterResponse() {
  // @@protoc_insertion_point(destructor:cdb.IterResponse)
  SharedDtor();
}

void IterResponse::SharedDtor() {
  cur_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete res_;
  }
}

void IterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IterResponse_descriptor_;
}

const IterResponse& IterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cocdb_2eproto();
  return *default_instance_;
}

IterResponse* IterResponse::default_instance_ = NULL;

IterResponse* IterResponse::New(::google::protobuf::Arena* arena) const {
  IterResponse* n = new IterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IterResponse::Clear() {
  if (res_ != NULL) delete res_;
  res_ = NULL;
  cur_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool IterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cdb.IterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cdb.Result res = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cur_key;
        break;
      }

      // optional bytes cur_key = 2;
      case 2: {
        if (tag == 18) {
         parse_cur_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cur_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cdb.IterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cdb.IterResponse)
  return false;
#undef DO_
}

void IterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cdb.IterResponse)
  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->res_, output);
  }

  // optional bytes cur_key = 2;
  if (this->cur_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cur_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:cdb.IterResponse)
}

::google::protobuf::uint8* IterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cdb.IterResponse)
  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->res_, target);
  }

  // optional bytes cur_key = 2;
  if (this->cur_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cur_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cdb.IterResponse)
  return target;
}

int IterResponse::ByteSize() const {
  int total_size = 0;

  // optional .cdb.Result res = 1;
  if (this->has_res()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->res_);
  }

  // optional bytes cur_key = 2;
  if (this->cur_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cur_key());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IterResponse::MergeFrom(const IterResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_res()) {
    mutable_res()->::cdb::Result::MergeFrom(from.res());
  }
  if (from.cur_key().size() > 0) {

    cur_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cur_key_);
  }
}

void IterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IterResponse::CopyFrom(const IterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterResponse::IsInitialized() const {

  return true;
}

void IterResponse::Swap(IterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IterResponse::InternalSwap(IterResponse* other) {
  std::swap(res_, other->res_);
  cur_key_.Swap(&other->cur_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IterResponse_descriptor_;
  metadata.reflection = IterResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cdb

// @@protoc_insertion_point(global_scope)
