// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: cocdb.proto
#ifndef GRPC_cocdb_2eproto__INCLUDED
#define GRPC_cocdb_2eproto__INCLUDED

#include "cocdb.pb.h"

#include <grpc++/impl/internal_stub.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/status.h>

namespace grpc {
class CompletionQueue;
class ChannelInterface;
class RpcService;
class ServerContext;
template <class OutMessage> class ClientAsyncResponseReader;
template <class OutMessage> class ServerAsyncResponseWriter;
}  // namespace grpc

namespace cdb {

class CDB GRPC_FINAL {
 public:
  class Stub GRPC_FINAL : public ::grpc::InternalStub {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Get(::grpc::ClientContext* context, const ::cdb::GetRequest& request, ::cdb::GetResponse* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::GetResponse>> AsyncGet(::grpc::ClientContext* context, const ::cdb::GetRequest& request, ::grpc::CompletionQueue* cq, void* tag);
    ::grpc::Status Put(::grpc::ClientContext* context, const ::cdb::PutRequest& request, ::cdb::PutResponse* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::PutResponse>> AsyncPut(::grpc::ClientContext* context, const ::cdb::PutRequest& request, ::grpc::CompletionQueue* cq, void* tag);
    ::grpc::Status BeginTrx(::grpc::ClientContext* context, const ::cdb::BeginRequest& request, ::cdb::Trx* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::Trx>> AsyncBeginTrx(::grpc::ClientContext* context, const ::cdb::BeginRequest& request, ::grpc::CompletionQueue* cq, void* tag);
    ::grpc::Status CommitTrx(::grpc::ClientContext* context, const ::cdb::Trx& request, ::cdb::CommitResponse* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::CommitResponse>> AsyncCommitTrx(::grpc::ClientContext* context, const ::cdb::Trx& request, ::grpc::CompletionQueue* cq, void* tag);
    ::grpc::Status Iter(::grpc::ClientContext* context, const ::cdb::IterRequest& request, ::cdb::IterResponse* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::IterResponse>> AsyncIter(::grpc::ClientContext* context, const ::cdb::IterRequest& request, ::grpc::CompletionQueue* cq, void* tag);
   private:
    const ::grpc::RpcMethod rpcmethod_Get_;
    const ::grpc::RpcMethod rpcmethod_Put_;
    const ::grpc::RpcMethod rpcmethod_BeginTrx_;
    const ::grpc::RpcMethod rpcmethod_CommitTrx_;
    const ::grpc::RpcMethod rpcmethod_Iter_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::cdb::GetRequest* request, ::cdb::GetResponse* response);
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::cdb::PutRequest* request, ::cdb::PutResponse* response);
    virtual ::grpc::Status BeginTrx(::grpc::ServerContext* context, const ::cdb::BeginRequest* request, ::cdb::Trx* response);
    virtual ::grpc::Status CommitTrx(::grpc::ServerContext* context, const ::cdb::Trx* request, ::cdb::CommitResponse* response);
    virtual ::grpc::Status Iter(::grpc::ServerContext* context, const ::cdb::IterRequest* request, ::cdb::IterResponse* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService(::grpc::CompletionQueue* cq);
    ~AsyncService() {};
    void RequestGet(::grpc::ServerContext* context, ::cdb::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::cdb::GetResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequestPut(::grpc::ServerContext* context, ::cdb::PutRequest* request, ::grpc::ServerAsyncResponseWriter< ::cdb::PutResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequestBeginTrx(::grpc::ServerContext* context, ::cdb::BeginRequest* request, ::grpc::ServerAsyncResponseWriter< ::cdb::Trx>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequestCommitTrx(::grpc::ServerContext* context, ::cdb::Trx* request, ::grpc::ServerAsyncResponseWriter< ::cdb::CommitResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequestIter(::grpc::ServerContext* context, ::cdb::IterRequest* request, ::grpc::ServerAsyncResponseWriter< ::cdb::IterResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
  };
};

}  // namespace cdb


#endif  // GRPC_cocdb_2eproto__INCLUDED
