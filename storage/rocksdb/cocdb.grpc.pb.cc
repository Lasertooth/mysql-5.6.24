// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: cocdb.proto

#include "cocdb.pb.h"
#include "cocdb.grpc.pb.h"

#include <grpc++/async_unary_call.h>
#include <grpc++/channel_interface.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/stream.h>
namespace cdb {

static const char* CDB_method_names[] = {
  "/cdb.CDB/Get",
  "/cdb.CDB/Put",
  "/cdb.CDB/BeginTrx",
  "/cdb.CDB/CommitTrx",
  "/cdb.CDB/Iter",
};

std::unique_ptr< CDB::Stub> CDB::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< CDB::Stub> stub(new CDB::Stub(channel));
  return stub;
}

CDB::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : ::grpc::InternalStub(channel), rpcmethod_Get_(CDB_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(CDB_method_names[0]))
  , rpcmethod_Put_(CDB_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(CDB_method_names[1]))
  , rpcmethod_BeginTrx_(CDB_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(CDB_method_names[2]))
  , rpcmethod_CommitTrx_(CDB_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(CDB_method_names[3]))
  , rpcmethod_Iter_(CDB_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel->RegisterMethod(CDB_method_names[4]))
  {}

::grpc::Status CDB::Stub::Get(::grpc::ClientContext* context, const ::cdb::GetRequest& request, ::cdb::GetResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_Get_, context, request, response);
}

std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::GetResponse>> CDB::Stub::AsyncGet(::grpc::ClientContext* context, const ::cdb::GetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::GetResponse>>(new ::grpc::ClientAsyncResponseReader< ::cdb::GetResponse>(channel(), cq, rpcmethod_Get_, context, request, tag));
}

::grpc::Status CDB::Stub::Put(::grpc::ClientContext* context, const ::cdb::PutRequest& request, ::cdb::PutResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_Put_, context, request, response);
}

std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::PutResponse>> CDB::Stub::AsyncPut(::grpc::ClientContext* context, const ::cdb::PutRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::PutResponse>>(new ::grpc::ClientAsyncResponseReader< ::cdb::PutResponse>(channel(), cq, rpcmethod_Put_, context, request, tag));
}

::grpc::Status CDB::Stub::BeginTrx(::grpc::ClientContext* context, const ::cdb::BeginRequest& request, ::cdb::Trx* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_BeginTrx_, context, request, response);
}

std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::Trx>> CDB::Stub::AsyncBeginTrx(::grpc::ClientContext* context, const ::cdb::BeginRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::Trx>>(new ::grpc::ClientAsyncResponseReader< ::cdb::Trx>(channel(), cq, rpcmethod_BeginTrx_, context, request, tag));
}

::grpc::Status CDB::Stub::CommitTrx(::grpc::ClientContext* context, const ::cdb::Trx& request, ::cdb::CommitResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_CommitTrx_, context, request, response);
}

std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::CommitResponse>> CDB::Stub::AsyncCommitTrx(::grpc::ClientContext* context, const ::cdb::Trx& request, ::grpc::CompletionQueue* cq, void* tag) {
  return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::CommitResponse>>(new ::grpc::ClientAsyncResponseReader< ::cdb::CommitResponse>(channel(), cq, rpcmethod_CommitTrx_, context, request, tag));
}

::grpc::Status CDB::Stub::Iter(::grpc::ClientContext* context, const ::cdb::IterRequest& request, ::cdb::IterResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(), rpcmethod_Iter_, context, request, response);
}

std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::IterResponse>> CDB::Stub::AsyncIter(::grpc::ClientContext* context, const ::cdb::IterRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cdb::IterResponse>>(new ::grpc::ClientAsyncResponseReader< ::cdb::IterResponse>(channel(), cq, rpcmethod_Iter_, context, request, tag));
}

CDB::AsyncService::AsyncService(::grpc::CompletionQueue* cq) : ::grpc::AsynchronousService(cq, CDB_method_names, 5) {}

CDB::Service::~Service() {
  delete service_;
}

::grpc::Status CDB::Service::Get(::grpc::ServerContext* context, const ::cdb::GetRequest* request, ::cdb::GetResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void CDB::AsyncService::RequestGet(::grpc::ServerContext* context, ::cdb::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::cdb::GetResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, cq, tag);
}

::grpc::Status CDB::Service::Put(::grpc::ServerContext* context, const ::cdb::PutRequest* request, ::cdb::PutResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void CDB::AsyncService::RequestPut(::grpc::ServerContext* context, ::cdb::PutRequest* request, ::grpc::ServerAsyncResponseWriter< ::cdb::PutResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, cq, tag);
}

::grpc::Status CDB::Service::BeginTrx(::grpc::ServerContext* context, const ::cdb::BeginRequest* request, ::cdb::Trx* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void CDB::AsyncService::RequestBeginTrx(::grpc::ServerContext* context, ::cdb::BeginRequest* request, ::grpc::ServerAsyncResponseWriter< ::cdb::Trx>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, cq, tag);
}

::grpc::Status CDB::Service::CommitTrx(::grpc::ServerContext* context, const ::cdb::Trx* request, ::cdb::CommitResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void CDB::AsyncService::RequestCommitTrx(::grpc::ServerContext* context, ::cdb::Trx* request, ::grpc::ServerAsyncResponseWriter< ::cdb::CommitResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, cq, tag);
}

::grpc::Status CDB::Service::Iter(::grpc::ServerContext* context, const ::cdb::IterRequest* request, ::cdb::IterResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void CDB::AsyncService::RequestIter(::grpc::ServerContext* context, ::cdb::IterRequest* request, ::grpc::ServerAsyncResponseWriter< ::cdb::IterResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(4, context, request, response, cq, tag);
}

::grpc::RpcService* CDB::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CDB_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CDB::Service, ::cdb::GetRequest, ::cdb::GetResponse>(
          std::function< ::grpc::Status(CDB::Service*, ::grpc::ServerContext*, const ::cdb::GetRequest*, ::cdb::GetResponse*)>(&CDB::Service::Get), this),
      new ::cdb::GetRequest, new ::cdb::GetResponse));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CDB_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CDB::Service, ::cdb::PutRequest, ::cdb::PutResponse>(
          std::function< ::grpc::Status(CDB::Service*, ::grpc::ServerContext*, const ::cdb::PutRequest*, ::cdb::PutResponse*)>(&CDB::Service::Put), this),
      new ::cdb::PutRequest, new ::cdb::PutResponse));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CDB_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CDB::Service, ::cdb::BeginRequest, ::cdb::Trx>(
          std::function< ::grpc::Status(CDB::Service*, ::grpc::ServerContext*, const ::cdb::BeginRequest*, ::cdb::Trx*)>(&CDB::Service::BeginTrx), this),
      new ::cdb::BeginRequest, new ::cdb::Trx));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CDB_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CDB::Service, ::cdb::Trx, ::cdb::CommitResponse>(
          std::function< ::grpc::Status(CDB::Service*, ::grpc::ServerContext*, const ::cdb::Trx*, ::cdb::CommitResponse*)>(&CDB::Service::CommitTrx), this),
      new ::cdb::Trx, new ::cdb::CommitResponse));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CDB_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CDB::Service, ::cdb::IterRequest, ::cdb::IterResponse>(
          std::function< ::grpc::Status(CDB::Service*, ::grpc::ServerContext*, const ::cdb::IterRequest*, ::cdb::IterResponse*)>(&CDB::Service::Iter), this),
      new ::cdb::IterRequest, new ::cdb::IterResponse));
  return service_;
}


}  // namespace cdb

