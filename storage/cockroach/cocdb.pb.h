// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cocdb.proto

#ifndef PROTOBUF_cocdb_2eproto__INCLUDED
#define PROTOBUF_cocdb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cdb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cocdb_2eproto();
void protobuf_AssignDesc_cocdb_2eproto();
void protobuf_ShutdownFile_cocdb_2eproto();

class BeginRequest;
class Trx;
class Result;
class Operation;
class GetRequest;
class GetResponse;
class PutRequest;
class PutResponse;
class CommitResponse;
class IterRequest;
class IterResponse;

enum Result_Status {
  Result_Status_OK = 0,
  Result_Status_ERROR = 1,
  Result_Status_Result_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Result_Status_Result_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Result_Status_IsValid(int value);
const Result_Status Result_Status_Status_MIN = Result_Status_OK;
const Result_Status Result_Status_Status_MAX = Result_Status_ERROR;
const int Result_Status_Status_ARRAYSIZE = Result_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Result_Status_descriptor();
inline const ::std::string& Result_Status_Name(Result_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Result_Status_descriptor(), value);
}
inline bool Result_Status_Parse(
    const ::std::string& name, Result_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Result_Status>(
    Result_Status_descriptor(), name, value);
}
enum Operation_Op {
  Operation_Op_PUT = 0,
  Operation_Op_DELETE = 1,
  Operation_Op_Operation_Op_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Operation_Op_Operation_Op_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Operation_Op_IsValid(int value);
const Operation_Op Operation_Op_Op_MIN = Operation_Op_PUT;
const Operation_Op Operation_Op_Op_MAX = Operation_Op_DELETE;
const int Operation_Op_Op_ARRAYSIZE = Operation_Op_Op_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Op_descriptor();
inline const ::std::string& Operation_Op_Name(Operation_Op value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Op_descriptor(), value);
}
inline bool Operation_Op_Parse(
    const ::std::string& name, Operation_Op* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Op>(
    Operation_Op_descriptor(), name, value);
}
enum IterRequest_Direction {
  IterRequest_Direction_Prev = 0,
  IterRequest_Direction_Next = 1,
  IterRequest_Direction_IterRequest_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IterRequest_Direction_IterRequest_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IterRequest_Direction_IsValid(int value);
const IterRequest_Direction IterRequest_Direction_Direction_MIN = IterRequest_Direction_Prev;
const IterRequest_Direction IterRequest_Direction_Direction_MAX = IterRequest_Direction_Next;
const int IterRequest_Direction_Direction_ARRAYSIZE = IterRequest_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* IterRequest_Direction_descriptor();
inline const ::std::string& IterRequest_Direction_Name(IterRequest_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    IterRequest_Direction_descriptor(), value);
}
inline bool IterRequest_Direction_Parse(
    const ::std::string& name, IterRequest_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IterRequest_Direction>(
    IterRequest_Direction_descriptor(), name, value);
}
// ===================================================================

class BeginRequest : public ::google::protobuf::Message {
 public:
  BeginRequest();
  virtual ~BeginRequest();

  BeginRequest(const BeginRequest& from);

  inline BeginRequest& operator=(const BeginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginRequest& default_instance();

  void Swap(BeginRequest* other);

  // implements Message ----------------------------------------------

  inline BeginRequest* New() const { return New(NULL); }

  BeginRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginRequest& from);
  void MergeFrom(const BeginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BeginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cdb.BeginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static BeginRequest* default_instance_;
};
// -------------------------------------------------------------------

class Trx : public ::google::protobuf::Message {
 public:
  Trx();
  virtual ~Trx();

  Trx(const Trx& from);

  inline Trx& operator=(const Trx& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trx& default_instance();

  void Swap(Trx* other);

  // implements Message ----------------------------------------------

  inline Trx* New() const { return New(NULL); }

  Trx* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Trx& from);
  void MergeFrom(const Trx& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Trx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string trx_id = 1;
  inline void clear_trx_id();
  static const int kTrxIdFieldNumber = 1;
  inline const ::std::string& trx_id() const;
  inline void set_trx_id(const ::std::string& value);
  inline void set_trx_id(const char* value);
  inline void set_trx_id(const char* value, size_t size);
  inline ::std::string* mutable_trx_id();
  inline ::std::string* release_trx_id();
  inline void set_allocated_trx_id(::std::string* trx_id);

  // @@protoc_insertion_point(class_scope:cdb.Trx)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr trx_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static Trx* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  inline Result* New() const { return New(NULL); }

  Result* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Result_Status Status;
  static const Status OK = Result_Status_OK;
  static const Status ERROR = Result_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return Result_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Result_Status_Status_MIN;
  static const Status Status_MAX =
    Result_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Result_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Result_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Result_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Result_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .cdb.Result.Status status = 2;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::cdb::Result_Status status() const;
  inline void set_status(::cdb::Result_Status value);

  // optional string msg = 3;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:cdb.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();

  void Swap(Operation* other);

  // implements Message ----------------------------------------------

  inline Operation* New() const { return New(NULL); }

  Operation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Operation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Operation_Op Op;
  static const Op PUT = Operation_Op_PUT;
  static const Op DELETE = Operation_Op_DELETE;
  static inline bool Op_IsValid(int value) {
    return Operation_Op_IsValid(value);
  }
  static const Op Op_MIN =
    Operation_Op_Op_MIN;
  static const Op Op_MAX =
    Operation_Op_Op_MAX;
  static const int Op_ARRAYSIZE =
    Operation_Op_Op_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Op_descriptor() {
    return Operation_Op_descriptor();
  }
  static inline const ::std::string& Op_Name(Op value) {
    return Operation_Op_Name(value);
  }
  static inline bool Op_Parse(const ::std::string& name,
      Op* value) {
    return Operation_Op_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .cdb.Operation.Op type = 1;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::cdb::Operation_Op type() const;
  inline void set_type(::cdb::Operation_Op value);

  // optional bytes key = 2;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes val = 3;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const void* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:cdb.Operation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static Operation* default_instance_;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  void Swap(GetRequest* other);

  // implements Message ----------------------------------------------

  inline GetRequest* New() const { return New(NULL); }

  GetRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string trx_id = 2;
  inline void clear_trx_id();
  static const int kTrxIdFieldNumber = 2;
  inline const ::std::string& trx_id() const;
  inline void set_trx_id(const ::std::string& value);
  inline void set_trx_id(const char* value);
  inline void set_trx_id(const char* value, size_t size);
  inline ::std::string* mutable_trx_id();
  inline ::std::string* release_trx_id();
  inline void set_allocated_trx_id(::std::string* trx_id);

  // @@protoc_insertion_point(class_scope:cdb.GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr trx_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  void Swap(GetResponse* other);

  // implements Message ----------------------------------------------

  inline GetResponse* New() const { return New(NULL); }

  GetResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cdb.Result res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline const ::cdb::Result& res() const;
  inline ::cdb::Result* mutable_res();
  inline ::cdb::Result* release_res();
  inline void set_allocated_res(::cdb::Result* res);

  // optional bytes val = 2;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const void* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:cdb.GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cdb::Result* res_;
  ::google::protobuf::internal::ArenaStringPtr val_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static GetResponse* default_instance_;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  void Swap(PutRequest* other);

  // implements Message ----------------------------------------------

  inline PutRequest* New() const { return New(NULL); }

  PutRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cdb.Operation ops = 1;
  inline int ops_size() const;
  inline void clear_ops();
  static const int kOpsFieldNumber = 1;
  inline const ::cdb::Operation& ops(int index) const;
  inline ::cdb::Operation* mutable_ops(int index);
  inline ::cdb::Operation* add_ops();
  inline const ::google::protobuf::RepeatedPtrField< ::cdb::Operation >&
      ops() const;
  inline ::google::protobuf::RepeatedPtrField< ::cdb::Operation >*
      mutable_ops();

  // optional string trx_id = 2;
  inline void clear_trx_id();
  static const int kTrxIdFieldNumber = 2;
  inline const ::std::string& trx_id() const;
  inline void set_trx_id(const ::std::string& value);
  inline void set_trx_id(const char* value);
  inline void set_trx_id(const char* value, size_t size);
  inline ::std::string* mutable_trx_id();
  inline ::std::string* release_trx_id();
  inline void set_allocated_trx_id(::std::string* trx_id);

  // @@protoc_insertion_point(class_scope:cdb.PutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::cdb::Operation > ops_;
  ::google::protobuf::internal::ArenaStringPtr trx_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static PutRequest* default_instance_;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();

  void Swap(PutResponse* other);

  // implements Message ----------------------------------------------

  inline PutResponse* New() const { return New(NULL); }

  PutResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cdb.Result res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline const ::cdb::Result& res() const;
  inline ::cdb::Result* mutable_res();
  inline ::cdb::Result* release_res();
  inline void set_allocated_res(::cdb::Result* res);

  // @@protoc_insertion_point(class_scope:cdb.PutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cdb::Result* res_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static PutResponse* default_instance_;
};
// -------------------------------------------------------------------

class CommitResponse : public ::google::protobuf::Message {
 public:
  CommitResponse();
  virtual ~CommitResponse();

  CommitResponse(const CommitResponse& from);

  inline CommitResponse& operator=(const CommitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitResponse& default_instance();

  void Swap(CommitResponse* other);

  // implements Message ----------------------------------------------

  inline CommitResponse* New() const { return New(NULL); }

  CommitResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitResponse& from);
  void MergeFrom(const CommitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cdb.Result res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline const ::cdb::Result& res() const;
  inline ::cdb::Result* mutable_res();
  inline ::cdb::Result* release_res();
  inline void set_allocated_res(::cdb::Result* res);

  // @@protoc_insertion_point(class_scope:cdb.CommitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cdb::Result* res_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static CommitResponse* default_instance_;
};
// -------------------------------------------------------------------

class IterRequest : public ::google::protobuf::Message {
 public:
  IterRequest();
  virtual ~IterRequest();

  IterRequest(const IterRequest& from);

  inline IterRequest& operator=(const IterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IterRequest& default_instance();

  void Swap(IterRequest* other);

  // implements Message ----------------------------------------------

  inline IterRequest* New() const { return New(NULL); }

  IterRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IterRequest& from);
  void MergeFrom(const IterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef IterRequest_Direction Direction;
  static const Direction Prev = IterRequest_Direction_Prev;
  static const Direction Next = IterRequest_Direction_Next;
  static inline bool Direction_IsValid(int value) {
    return IterRequest_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    IterRequest_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    IterRequest_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    IterRequest_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return IterRequest_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return IterRequest_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return IterRequest_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes offset_key = 1;
  inline void clear_offset_key();
  static const int kOffsetKeyFieldNumber = 1;
  inline const ::std::string& offset_key() const;
  inline void set_offset_key(const ::std::string& value);
  inline void set_offset_key(const char* value);
  inline void set_offset_key(const void* value, size_t size);
  inline ::std::string* mutable_offset_key();
  inline ::std::string* release_offset_key();
  inline void set_allocated_offset_key(::std::string* offset_key);

  // optional .cdb.IterRequest.Direction direction = 2;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 2;
  inline ::cdb::IterRequest_Direction direction() const;
  inline void set_direction(::cdb::IterRequest_Direction value);

  // optional int32 cnt = 3;
  inline void clear_cnt();
  static const int kCntFieldNumber = 3;
  inline ::google::protobuf::int32 cnt() const;
  inline void set_cnt(::google::protobuf::int32 value);

  // optional string trx_id = 4;
  inline void clear_trx_id();
  static const int kTrxIdFieldNumber = 4;
  inline const ::std::string& trx_id() const;
  inline void set_trx_id(const ::std::string& value);
  inline void set_trx_id(const char* value);
  inline void set_trx_id(const char* value, size_t size);
  inline ::std::string* mutable_trx_id();
  inline ::std::string* release_trx_id();
  inline void set_allocated_trx_id(::std::string* trx_id);

  // @@protoc_insertion_point(class_scope:cdb.IterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr offset_key_;
  int direction_;
  ::google::protobuf::int32 cnt_;
  ::google::protobuf::internal::ArenaStringPtr trx_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static IterRequest* default_instance_;
};
// -------------------------------------------------------------------

class IterResponse : public ::google::protobuf::Message {
 public:
  IterResponse();
  virtual ~IterResponse();

  IterResponse(const IterResponse& from);

  inline IterResponse& operator=(const IterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IterResponse& default_instance();

  void Swap(IterResponse* other);

  // implements Message ----------------------------------------------

  inline IterResponse* New() const { return New(NULL); }

  IterResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IterResponse& from);
  void MergeFrom(const IterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cdb.Result res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline const ::cdb::Result& res() const;
  inline ::cdb::Result* mutable_res();
  inline ::cdb::Result* release_res();
  inline void set_allocated_res(::cdb::Result* res);

  // optional bytes cur_key = 2;
  inline void clear_cur_key();
  static const int kCurKeyFieldNumber = 2;
  inline const ::std::string& cur_key() const;
  inline void set_cur_key(const ::std::string& value);
  inline void set_cur_key(const char* value);
  inline void set_cur_key(const void* value, size_t size);
  inline ::std::string* mutable_cur_key();
  inline ::std::string* release_cur_key();
  inline void set_allocated_cur_key(::std::string* cur_key);

  // @@protoc_insertion_point(class_scope:cdb.IterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::cdb::Result* res_;
  ::google::protobuf::internal::ArenaStringPtr cur_key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cocdb_2eproto();
  friend void protobuf_AssignDesc_cocdb_2eproto();
  friend void protobuf_ShutdownFile_cocdb_2eproto();

  void InitAsDefaultInstance();
  static IterResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BeginRequest

// -------------------------------------------------------------------

// Trx

// optional string trx_id = 1;
inline void Trx::clear_trx_id() {
  trx_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Trx::trx_id() const {
  // @@protoc_insertion_point(field_get:cdb.Trx.trx_id)
  return trx_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trx::set_trx_id(const ::std::string& value) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.Trx.trx_id)
}
inline void Trx::set_trx_id(const char* value) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.Trx.trx_id)
}
inline void Trx::set_trx_id(const char* value, size_t size) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.Trx.trx_id)
}
inline ::std::string* Trx::mutable_trx_id() {
  
  // @@protoc_insertion_point(field_mutable:cdb.Trx.trx_id)
  return trx_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trx::release_trx_id() {
  
  return trx_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trx::set_allocated_trx_id(::std::string* trx_id) {
  if (trx_id != NULL) {
    
  } else {
    
  }
  trx_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trx_id);
  // @@protoc_insertion_point(field_set_allocated:cdb.Trx.trx_id)
}

// -------------------------------------------------------------------

// Result

// optional .cdb.Result.Status status = 2;
inline void Result::clear_status() {
  status_ = 0;
}
inline ::cdb::Result_Status Result::status() const {
  // @@protoc_insertion_point(field_get:cdb.Result.status)
  return static_cast< ::cdb::Result_Status >(status_);
}
inline void Result::set_status(::cdb::Result_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:cdb.Result.status)
}

// optional string msg = 3;
inline void Result::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::msg() const {
  // @@protoc_insertion_point(field_get:cdb.Result.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.Result.msg)
}
inline void Result::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.Result.msg)
}
inline void Result::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.Result.msg)
}
inline ::std::string* Result::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:cdb.Result.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:cdb.Result.msg)
}

// -------------------------------------------------------------------

// Operation

// optional .cdb.Operation.Op type = 1;
inline void Operation::clear_type() {
  type_ = 0;
}
inline ::cdb::Operation_Op Operation::type() const {
  // @@protoc_insertion_point(field_get:cdb.Operation.type)
  return static_cast< ::cdb::Operation_Op >(type_);
}
inline void Operation::set_type(::cdb::Operation_Op value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cdb.Operation.type)
}

// optional bytes key = 2;
inline void Operation::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::key() const {
  // @@protoc_insertion_point(field_get:cdb.Operation.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.Operation.key)
}
inline void Operation::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.Operation.key)
}
inline void Operation::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.Operation.key)
}
inline ::std::string* Operation::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cdb.Operation.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_key() {
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cdb.Operation.key)
}

// optional bytes val = 3;
inline void Operation::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::val() const {
  // @@protoc_insertion_point(field_get:cdb.Operation.val)
  return val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_val(const ::std::string& value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.Operation.val)
}
inline void Operation::set_val(const char* value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.Operation.val)
}
inline void Operation::set_val(const void* value, size_t size) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.Operation.val)
}
inline ::std::string* Operation::mutable_val() {
  
  // @@protoc_insertion_point(field_mutable:cdb.Operation.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_val() {
  
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:cdb.Operation.val)
}

// -------------------------------------------------------------------

// GetRequest

// optional bytes key = 1;
inline void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:cdb.GetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.GetRequest.key)
}
inline void GetRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.GetRequest.key)
}
inline void GetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.GetRequest.key)
}
inline ::std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:cdb.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_key() {
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cdb.GetRequest.key)
}

// optional string trx_id = 2;
inline void GetRequest::clear_trx_id() {
  trx_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRequest::trx_id() const {
  // @@protoc_insertion_point(field_get:cdb.GetRequest.trx_id)
  return trx_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_trx_id(const ::std::string& value) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.GetRequest.trx_id)
}
inline void GetRequest::set_trx_id(const char* value) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.GetRequest.trx_id)
}
inline void GetRequest::set_trx_id(const char* value, size_t size) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.GetRequest.trx_id)
}
inline ::std::string* GetRequest::mutable_trx_id() {
  
  // @@protoc_insertion_point(field_mutable:cdb.GetRequest.trx_id)
  return trx_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRequest::release_trx_id() {
  
  return trx_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRequest::set_allocated_trx_id(::std::string* trx_id) {
  if (trx_id != NULL) {
    
  } else {
    
  }
  trx_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trx_id);
  // @@protoc_insertion_point(field_set_allocated:cdb.GetRequest.trx_id)
}

// -------------------------------------------------------------------

// GetResponse

// optional .cdb.Result res = 1;
inline bool GetResponse::has_res() const {
  return !_is_default_instance_ && res_ != NULL;
}
inline void GetResponse::clear_res() {
  if (res_ != NULL) delete res_;
  res_ = NULL;
}
inline const ::cdb::Result& GetResponse::res() const {
  // @@protoc_insertion_point(field_get:cdb.GetResponse.res)
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::cdb::Result* GetResponse::mutable_res() {
  
  if (res_ == NULL) {
    res_ = new ::cdb::Result;
  }
  // @@protoc_insertion_point(field_mutable:cdb.GetResponse.res)
  return res_;
}
inline ::cdb::Result* GetResponse::release_res() {
  
  ::cdb::Result* temp = res_;
  res_ = NULL;
  return temp;
}
inline void GetResponse::set_allocated_res(::cdb::Result* res) {
  delete res_;
  res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cdb.GetResponse.res)
}

// optional bytes val = 2;
inline void GetResponse::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::val() const {
  // @@protoc_insertion_point(field_get:cdb.GetResponse.val)
  return val_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_val(const ::std::string& value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.GetResponse.val)
}
inline void GetResponse::set_val(const char* value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.GetResponse.val)
}
inline void GetResponse::set_val(const void* value, size_t size) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.GetResponse.val)
}
inline ::std::string* GetResponse::mutable_val() {
  
  // @@protoc_insertion_point(field_mutable:cdb.GetResponse.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_val() {
  
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:cdb.GetResponse.val)
}

// -------------------------------------------------------------------

// PutRequest

// repeated .cdb.Operation ops = 1;
inline int PutRequest::ops_size() const {
  return ops_.size();
}
inline void PutRequest::clear_ops() {
  ops_.Clear();
}
inline const ::cdb::Operation& PutRequest::ops(int index) const {
  // @@protoc_insertion_point(field_get:cdb.PutRequest.ops)
  return ops_.Get(index);
}
inline ::cdb::Operation* PutRequest::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:cdb.PutRequest.ops)
  return ops_.Mutable(index);
}
inline ::cdb::Operation* PutRequest::add_ops() {
  // @@protoc_insertion_point(field_add:cdb.PutRequest.ops)
  return ops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cdb::Operation >&
PutRequest::ops() const {
  // @@protoc_insertion_point(field_list:cdb.PutRequest.ops)
  return ops_;
}
inline ::google::protobuf::RepeatedPtrField< ::cdb::Operation >*
PutRequest::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:cdb.PutRequest.ops)
  return &ops_;
}

// optional string trx_id = 2;
inline void PutRequest::clear_trx_id() {
  trx_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::trx_id() const {
  // @@protoc_insertion_point(field_get:cdb.PutRequest.trx_id)
  return trx_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_trx_id(const ::std::string& value) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.PutRequest.trx_id)
}
inline void PutRequest::set_trx_id(const char* value) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.PutRequest.trx_id)
}
inline void PutRequest::set_trx_id(const char* value, size_t size) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.PutRequest.trx_id)
}
inline ::std::string* PutRequest::mutable_trx_id() {
  
  // @@protoc_insertion_point(field_mutable:cdb.PutRequest.trx_id)
  return trx_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_trx_id() {
  
  return trx_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_trx_id(::std::string* trx_id) {
  if (trx_id != NULL) {
    
  } else {
    
  }
  trx_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trx_id);
  // @@protoc_insertion_point(field_set_allocated:cdb.PutRequest.trx_id)
}

// -------------------------------------------------------------------

// PutResponse

// optional .cdb.Result res = 1;
inline bool PutResponse::has_res() const {
  return !_is_default_instance_ && res_ != NULL;
}
inline void PutResponse::clear_res() {
  if (res_ != NULL) delete res_;
  res_ = NULL;
}
inline const ::cdb::Result& PutResponse::res() const {
  // @@protoc_insertion_point(field_get:cdb.PutResponse.res)
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::cdb::Result* PutResponse::mutable_res() {
  
  if (res_ == NULL) {
    res_ = new ::cdb::Result;
  }
  // @@protoc_insertion_point(field_mutable:cdb.PutResponse.res)
  return res_;
}
inline ::cdb::Result* PutResponse::release_res() {
  
  ::cdb::Result* temp = res_;
  res_ = NULL;
  return temp;
}
inline void PutResponse::set_allocated_res(::cdb::Result* res) {
  delete res_;
  res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cdb.PutResponse.res)
}

// -------------------------------------------------------------------

// CommitResponse

// optional .cdb.Result res = 1;
inline bool CommitResponse::has_res() const {
  return !_is_default_instance_ && res_ != NULL;
}
inline void CommitResponse::clear_res() {
  if (res_ != NULL) delete res_;
  res_ = NULL;
}
inline const ::cdb::Result& CommitResponse::res() const {
  // @@protoc_insertion_point(field_get:cdb.CommitResponse.res)
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::cdb::Result* CommitResponse::mutable_res() {
  
  if (res_ == NULL) {
    res_ = new ::cdb::Result;
  }
  // @@protoc_insertion_point(field_mutable:cdb.CommitResponse.res)
  return res_;
}
inline ::cdb::Result* CommitResponse::release_res() {
  
  ::cdb::Result* temp = res_;
  res_ = NULL;
  return temp;
}
inline void CommitResponse::set_allocated_res(::cdb::Result* res) {
  delete res_;
  res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cdb.CommitResponse.res)
}

// -------------------------------------------------------------------

// IterRequest

// optional bytes offset_key = 1;
inline void IterRequest::clear_offset_key() {
  offset_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IterRequest::offset_key() const {
  // @@protoc_insertion_point(field_get:cdb.IterRequest.offset_key)
  return offset_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IterRequest::set_offset_key(const ::std::string& value) {
  
  offset_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.IterRequest.offset_key)
}
inline void IterRequest::set_offset_key(const char* value) {
  
  offset_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.IterRequest.offset_key)
}
inline void IterRequest::set_offset_key(const void* value, size_t size) {
  
  offset_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.IterRequest.offset_key)
}
inline ::std::string* IterRequest::mutable_offset_key() {
  
  // @@protoc_insertion_point(field_mutable:cdb.IterRequest.offset_key)
  return offset_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IterRequest::release_offset_key() {
  
  return offset_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IterRequest::set_allocated_offset_key(::std::string* offset_key) {
  if (offset_key != NULL) {
    
  } else {
    
  }
  offset_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offset_key);
  // @@protoc_insertion_point(field_set_allocated:cdb.IterRequest.offset_key)
}

// optional .cdb.IterRequest.Direction direction = 2;
inline void IterRequest::clear_direction() {
  direction_ = 0;
}
inline ::cdb::IterRequest_Direction IterRequest::direction() const {
  // @@protoc_insertion_point(field_get:cdb.IterRequest.direction)
  return static_cast< ::cdb::IterRequest_Direction >(direction_);
}
inline void IterRequest::set_direction(::cdb::IterRequest_Direction value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:cdb.IterRequest.direction)
}

// optional int32 cnt = 3;
inline void IterRequest::clear_cnt() {
  cnt_ = 0;
}
inline ::google::protobuf::int32 IterRequest::cnt() const {
  // @@protoc_insertion_point(field_get:cdb.IterRequest.cnt)
  return cnt_;
}
inline void IterRequest::set_cnt(::google::protobuf::int32 value) {
  
  cnt_ = value;
  // @@protoc_insertion_point(field_set:cdb.IterRequest.cnt)
}

// optional string trx_id = 4;
inline void IterRequest::clear_trx_id() {
  trx_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IterRequest::trx_id() const {
  // @@protoc_insertion_point(field_get:cdb.IterRequest.trx_id)
  return trx_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IterRequest::set_trx_id(const ::std::string& value) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.IterRequest.trx_id)
}
inline void IterRequest::set_trx_id(const char* value) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.IterRequest.trx_id)
}
inline void IterRequest::set_trx_id(const char* value, size_t size) {
  
  trx_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.IterRequest.trx_id)
}
inline ::std::string* IterRequest::mutable_trx_id() {
  
  // @@protoc_insertion_point(field_mutable:cdb.IterRequest.trx_id)
  return trx_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IterRequest::release_trx_id() {
  
  return trx_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IterRequest::set_allocated_trx_id(::std::string* trx_id) {
  if (trx_id != NULL) {
    
  } else {
    
  }
  trx_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trx_id);
  // @@protoc_insertion_point(field_set_allocated:cdb.IterRequest.trx_id)
}

// -------------------------------------------------------------------

// IterResponse

// optional .cdb.Result res = 1;
inline bool IterResponse::has_res() const {
  return !_is_default_instance_ && res_ != NULL;
}
inline void IterResponse::clear_res() {
  if (res_ != NULL) delete res_;
  res_ = NULL;
}
inline const ::cdb::Result& IterResponse::res() const {
  // @@protoc_insertion_point(field_get:cdb.IterResponse.res)
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::cdb::Result* IterResponse::mutable_res() {
  
  if (res_ == NULL) {
    res_ = new ::cdb::Result;
  }
  // @@protoc_insertion_point(field_mutable:cdb.IterResponse.res)
  return res_;
}
inline ::cdb::Result* IterResponse::release_res() {
  
  ::cdb::Result* temp = res_;
  res_ = NULL;
  return temp;
}
inline void IterResponse::set_allocated_res(::cdb::Result* res) {
  delete res_;
  res_ = res;
  if (res) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cdb.IterResponse.res)
}

// optional bytes cur_key = 2;
inline void IterResponse::clear_cur_key() {
  cur_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IterResponse::cur_key() const {
  // @@protoc_insertion_point(field_get:cdb.IterResponse.cur_key)
  return cur_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IterResponse::set_cur_key(const ::std::string& value) {
  
  cur_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cdb.IterResponse.cur_key)
}
inline void IterResponse::set_cur_key(const char* value) {
  
  cur_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cdb.IterResponse.cur_key)
}
inline void IterResponse::set_cur_key(const void* value, size_t size) {
  
  cur_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cdb.IterResponse.cur_key)
}
inline ::std::string* IterResponse::mutable_cur_key() {
  
  // @@protoc_insertion_point(field_mutable:cdb.IterResponse.cur_key)
  return cur_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IterResponse::release_cur_key() {
  
  return cur_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IterResponse::set_allocated_cur_key(::std::string* cur_key) {
  if (cur_key != NULL) {
    
  } else {
    
  }
  cur_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cur_key);
  // @@protoc_insertion_point(field_set_allocated:cdb.IterResponse.cur_key)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cdb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cdb::Result_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cdb::Result_Status>() {
  return ::cdb::Result_Status_descriptor();
}
template <> struct is_proto_enum< ::cdb::Operation_Op> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cdb::Operation_Op>() {
  return ::cdb::Operation_Op_descriptor();
}
template <> struct is_proto_enum< ::cdb::IterRequest_Direction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cdb::IterRequest_Direction>() {
  return ::cdb::IterRequest_Direction_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cocdb_2eproto__INCLUDED
